// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\xff\x6f\xdb\xb6\xb3\xbf\xeb\xaf\xb8\x69\x78\x58\x03\xd8\x96\xd3\x6e\xc5\xea\xd8\x79\x70\x1d\xa5\x11\x9e\x63\x07\xb6\xd2\xae\x18\x86\x80\x96\xce\x36\x5b\x89\xd4\x48\x3a\x89\x97\xf9\x7f\x7f\x20\x25\x7f\x91\x2d\x27\x4e\xd1\x25\xfe\x7c\x96\x04\x6d\x24\xea\xbe\xdf\xf1\xee\x28\x52\x77\x77\x10\xe2\x90\x32\x04\xfb\xea\x8a\x44\x28\x54\x4c\x18\x19\xa1\xb0\x61\x36\x6b\xea\xfb\xf3\xf4\xfe\xee\x0e\x90\x85\x30\x9b\x59\x5b\x51\x2e\x7b\x6d\x8d\x75\x77\x07\x15\xf7\x56\xa1\x60\x24\xba\xec\xb5\x61\x36\x73\x7e\x74\x0c\x9c\xfc\x5f\x81\x01\xd2\x6b\x14\x0d\x0d\xd4\xcb\x6e\x52\x9c\x8c\x7a\x9e\xbc\x9c\x0c\xbe\x60\xa0\x34\xd9\xdf\x35\x4a\x5f\x11\x35\x91\xf0\x37\x28\x7e\x99\x24\x73\x54\x3a\x04\xfc\x73\xf1\xd0\x1e\x52\x41\xd9\x48\xe3\xd4\x34\x8e\xd1\x42\x56\x4e\xcd\x28\xfc\x0d\x11\xb2\x55\x8e\x7f\x80\x06\xfa\x20\xf8\x24\x69\x93\x01\x46\xb2\xd2\xe7\x42\x61\x78\x41\xa8\x90\x95\x8f\x24\x9a\xa0\x66\xf8\x85\x53\x06\x36\x68\xaa\x90\xb2\x1c\x29\x78\xa5\x69\x55\x5a\x3c\x8e\x39\x4b\x91\x0f\xb2\xb1\x15\x7a\x07\x30\x9b\xbd\xba\xbb\x83\x1b\xaa\xc6\x79\xe0\x4a\x0f\x63\x7e\x8d\x79\xee\x1d\x12\xa3\xcc\xcc\x58\xc4\x7d\x21\xf8\xc1\xe2\x6a\x8b\x6f\x42\x94\x81\xa0\x89\xa2\x9c\xd9\xf7\xd8\x58\xe1\xad\x4a\xfd\x78\x15\x51\xa9\x32\x50\x41\xd8\x08\xa1\x02\xb3\x59\x2a\x57\xcd\x5a\x0e\x6e\xda\x49\x5b\xa5\x6c\x0c\xa9\xc5\xd7\x77\x0d\x58\x28\x90\x09\x96\x32\x6f\x32\xc6\x15\xd1\x32\xe5\x48\xae\x0c\x7f\x1b\xdd\x3e\x9f\x88\x00\x6b\xa9\x33\x91\xa1\x20\x8a\x8b\x34\xfc\xac\x02\x43\xe5\x6c\x20\x23\x12\x7c\xad\x84\x38\x24\x93\x48\x55\x14\x55\x11\x66\x56\x50\x18\x27\x11\x51\xf9\x58\xac\x6c\x33\x79\x9e\xce\x44\xea\x29\x10\x17\x91\xca\x4f\xb4\x1d\xe9\x0d\x49\x14\x0d\x48\xf0\x75\x83\x5e\xa1\xf8\x9a\x28\xfc\x0d\x0f\x01\x46\x94\x7d\xdd\x59\x82\x44\xa0\x0e\x16\x7b\x37\xe8\x15\xfa\xf7\x1a\xc0\xa4\x8d\x1d\x25\xa0\x01\x67\x18\xf3\x2f\x74\x47\x19\x34\xfc\x44\x44\xbb\x4a\xbc\xbb\x72\x43\xce\x55\x9a\x24\xb7\xc4\xd4\x98\x26\xc1\x98\xa8\x25\x82\xe0\xf1\xb7\x47\xc2\x3a\xb5\x18\xa5\x24\xa3\x47\x44\x69\x4e\xb6\x44\x73\x0b\x27\x6a\xba\xa0\xb7\x99\x2a\x1e\x17\xf9\x9b\x14\x83\x88\x22\x53\xdf\xae\xf1\x36\x8a\xcb\x22\xf3\x6d\xf1\xb4\x49\x97\x32\xa9\x08\x0b\x50\x16\xd0\xdd\xc8\x8d\xf7\x58\x95\x27\x72\x84\x8c\xe2\xb7\x3b\xe9\x3e\x62\x9b\x1e\xca\x4a\xc9\x96\xcc\x59\x58\x3b\xac\xb5\xca\x95\x2b\x8d\x07\x50\x85\xf2\x6c\x66\xa5\x83\x90\x0e\x9a\x1c\x7d\xbf\x45\xf2\xf5\xd5\x30\x29\xaf\x68\x54\xc0\xaf\x87\x92\x47\xd7\x18\xae\x71\x9c\x0f\xef\xce\x73\x8e\xb1\xc1\xb5\xbc\x8b\x49\xa5\x29\x19\x8f\x8f\xa6\x9c\xd7\x6f\xf0\x5b\x26\xa6\xf5\xe2\xbf\x7b\xfc\xd7\x5c\xb5\xbf\x88\x36\xe8\x15\xfa\x67\x8b\xd7\xd7\xfc\x43\x12\x7a\x25\x31\x10\xb8\x3d\xd1\xaf\x61\x28\x7e\xa5\x2b\xf9\x23\xc0\x13\x22\xd4\xf4\x11\xf0\x8a\x8c\x76\x85\x26\x23\x64\xea\x8a\x86\xeb\x85\x67\x15\xe5\x9a\x06\x8a\x0b\x9e\xc8\x65\xa0\x2b\xa2\xf0\x2a\x1f\x9a\x2f\xd1\xf7\xb8\xec\xb1\x69\x55\x64\x8a\xaa\xe9\x55\x48\x65\x12\x91\xe9\xd5\x96\x56\xef\xe1\x54\xbf\x49\x39\xe6\x8c\x2a\xae\x0d\x72\xa5\x38\x8f\x1e\x59\x44\x57\x69\x63\x4c\x68\xb4\x8c\x83\xe5\x6a\xea\xd1\x52\xe6\x29\x8d\x55\x6c\xc4\xb2\xea\x3f\x9c\x74\x5b\xfe\xe7\x0b\x17\xf4\x10\x5c\x5c\xbe\x6f\x7b\x2d\xb0\xcb\x8e\xf3\xe9\x4d\xcb\x71\x4e\xfc\x13\xf8\xed\xcc\x3f\x6f\xc3\x61\xa5\x0a\xbe\x20\x4c\x52\x1d\x6c\x24\x72\x1c\xb7\x63\x83\x3d\x56\x2a\xa9\x39\xce\xcd\xcd\x4d\xe5\xe6\x4d\x85\x8b\x91\xe3\xf7\x9c\x5b\x4d\xeb\x50\x23\x67\x97\x65\xb5\x82\x59\x09\x55\x68\x1f\x5b\xf5\x1f\xca\x65\xab\xaf\xa6\x11\x02\x61\x21\x18\x26\x21\x0a\xaa\x1d\xaa\x9b\x2d\xd0\xa4\x65\xcd\x71\x46\x54\x8d\x27\x83\x4a\xc0\x63\x47\xeb\x30\x9a\x30\xc7\x90\x23\x41\x4a\xaf\x6c\x54\x2b\xcf\xcd\x21\x2d\xcb\xf2\xc7\x08\xe7\x9e\x0f\x6d\x1a\x20\x93\x08\xaf\xce\x3d\xff\xc0\xb2\x5a\x3c\x99\x0a\x3a\x1a\x2b\x78\x15\x1c\xc0\xeb\xea\xe1\xcf\x70\x9e\x52\xb4\xac\x0b\x14\x31\x95\x92\x72\x06\x54\xc2\x18\x05\x0e\xa6\x30\x12\x84\x29\x0c\x4b\x30\x14\x88\xc0\x87\x10\x8c\x89\x18\x61\x09\x14\x07\xc2\xa6\x90\xa0\x90\x9c\x01\x1f\x28\x42\x99\x8e\x7f\x02\x01\x4f\xa6\x16\x1f\x82\x1a\x53\x09\x92\x0f\xd5\x0d\x11\xa9\x86\x44\x4a\x1e\x50\xa2\x30\x84\x90\x07\x93\x18\x59\x3a\x71\x61\x48\x23\x94\xf0\x4a\x8d\x11\xec\x7e\x86\x61\x1f\x18\x26\x21\x92\xc8\xa2\x0c\xf4\xb3\xf9\x23\xb3\x10\xe5\x13\x05\x02\xa5\x12\xd4\x58\xa1\x04\x94\x05\xd1\x24\xd4\x32\xcc\x1f\x47\x34\xa6\x19\x07\x8d\x6e\x14\x97\x96\xe2\x30\x91\x58\x32\x72\x96\x20\xe6\x21\x1d\xea\xbf\x68\xd4\x4a\x26\x83\x88\xca\x71\x09\x42\xaa\x49\x0f\x26\x0a\x4b\x20\xf5\xa0\xb1\x63\x49\xeb\xe1\x70\x01\x12\xa3\xc8\x0a\x78\x42\x51\x82\xd1\x75\x29\x9d\x81\xd1\xa2\x27\xda\xa0\x2a\x33\x91\xd4\x23\x37\x63\x1e\xe7\x35\xa1\xd2\x1a\x4e\x04\xa3\x72\x8c\x06\x27\xe4\x20\xb9\xe1\xa8\xa3\x59\x8f\x68\xf0\x21\x8f\x22\x7e\xa3\x55\x0b\x38\x0b\x69\xb6\xf6\x34\x4e\x26\x03\xbd\xfe\x0e\x16\x7e\x65\x5c\xd1\x20\x35\xb7\x71\x40\xb2\xf4\x6a\xf6\x48\x8e\x49\x14\xc1\x00\x33\x83\x61\x08\x94\x01\x59\x51\x47\x68\xf6\xba\xa3\x54\x94\x44\x90\x70\x61\xf8\xad\xab\x59\xb1\x2c\xff\xcc\x85\x7e\xf7\xd4\xff\xd4\xec\xb9\xe0\xf5\xe1\xa2\xd7\xfd\xe8\x9d\xb8\x27\x60\x37\xfb\xe0\xf5\xed\x12\x7c\xf2\xfc\xb3\xee\xa5\x0f\x9f\x9a\xbd\x5e\xb3\xe3\x7f\x86\xee\x29\x34\x3b\x9f\xe1\xff\xbc\xce\x49\x09\xdc\xdf\x2e\x7a\x6e\xbf\x0f\xdd\x9e\xe5\x9d\x5f\xb4\x3d\xf7\xa4\x04\x5e\xa7\xd5\xbe\x3c\xf1\x3a\x1f\xe0\xfd\xa5\x0f\x9d\xae\x0f\x6d\xef\xdc\xf3\xdd\x13\xf0\xbb\xa0\x19\x66\xa4\x3c\xb7\xaf\x89\x9d\xbb\xbd\xd6\x59\xb3\xe3\x37\xdf\x7b\x6d\xcf\xff\x5c\xb2\x4e\x3d\xbf\xa3\x69\x9e\x76\x7b\xd0\x84\x8b\x66\xcf\xf7\x5a\x97\xed\x66\x0f\x2e\x2e\x7b\x17\xdd\xbe\x0b\xcd\xce\x09\x74\xba\x1d\xaf\x73\xda\xf3\x3a\x1f\xdc\x73\xb7\xe3\x57\xc0\xeb\x40\xa7\x0b\xee\x47\xb7\xe3\x43\xff\xac\xd9\x6e\x6b\x56\x56\xf3\xd2\x3f\xeb\xf6\xb4\x7c\xd0\xea\x5e\x7c\xee\x79\x1f\xce\x7c\x38\xeb\xb6\x4f\xdc\x5e\x1f\xde\xbb\xd0\xf6\x9a\xef\xdb\x6e\xca\xaa\xf3\x19\x5a\xed\xa6\x77\x5e\x82\x93\xe6\x79\xf3\x83\x6b\xb0\xba\xfe\x99\xdb\xb3\x34\x58\x2a\x1d\x7c\x3a\x73\xf5\x90\xe6\xd7\xec\x40\xb3\xe5\x7b\xdd\x8e\x56\xa3\xd5\xed\xf8\xbd\x66\xcb\x2f\x81\xdf\xed\xf9\x0b\xd4\x4f\x5e\xdf\x2d\x41\xb3\xe7\xf5\xb5\x41\x4e\x7b\xdd\xf3\x92\xa5\xcd\xd9\x3d\xd5\x20\x5e\x47\xe3\x75\xdc\x94\x8a\x36\x35\xe4\x3c\xd2\xed\x99\xfb\xcb\xbe\xbb\x20\x08\x27\x6e\xb3\xed\x75\x3e\xf4\x35\xb2\x56\x71\x0e\x5c\xb1\xca\xe5\x63\xab\x6e\x52\xe0\x6d\x1c\x31\xd9\x28\x48\x6c\x87\xef\xde\xbd\x4b\xf3\x99\xbd\x1b\x90\xd4\xc9\xad\x61\x0f\x39\x53\xe5\x21\x89\x69\x34\xad\xc1\x4f\x67\x18\x5d\xa3\xa2\x01\x81\x0e\x4e\xf0\xa7\x12\x2c\x06\x4a\xd0\x14\x94\x44\x25\x90\x84\xc9\xb2\x44\x41\x87\x47\x30\xe0\xb7\x65\x49\xff\xd2\xb5\x18\x06\x5c\x84\x28\xca\x03\x7e\x7b\x04\x86\xa8\xa4\x7f\x61\x0d\x0e\x7f\x4e\x6e\x8f\x20\x26\x62\x44\x59\x0d\xaa\x47\x3a\xb7\x8e\x91\x84\xcf\xc9\x3f\x46\x45\x40\x57\xd4\x86\x7d\x4d\xf1\x46\xcf\x22\x5b\xcf\x5e\x85\x4c\x35\xec\x1b\x1a\xaa\x71\x23\xc4\x6b\x1a\x60\xd9\xdc\x3c\x9f\xb1\xc0\x99\x8b\xab\x9d\x59\xc6\x3f\x27\xf4\xba\x61\xb7\x52\x51\xcb\xfe\x34\xc1\x15\xc1\x75\x2b\xe2\x68\xe7\x1e\x99\x4a\x20\x51\x35\x2e\xfd\xd3\xf2\xaf\xcf\x2c\xbe\x79\x53\xf3\x7c\xee\xbe\xaf\x17\xa9\x3b\x46\xb8\x63\xcb\xaa\x3b\x3a\x28\xf5\xc5\x80\x87\x53\xa0\x0a\x63\x19\xf0\x04\x1b\xb6\x6d\x6e\xd4\x54\x5f\x67\x33\x4a\x06\x63\x8c\x89\x99\x51\xae\xae\xee\xe7\xf3\xde\xf7\x49\x95\x2c\xdf\xe0\xe0\x2b\x55\xe5\xf4\x41\xcc\xb9\x1a\x1b\xa4\xb4\x36\x50\x22\x31\x5c\x02\xe9\xd8\x30\xd8\x65\x12\x7e\x99\x48\x55\x03\xc6\x19\x1e\xc1\x18\x75\x65\xaa\xc1\x61\xb5\xfa\x3f\x47\x10\x51\x86\xe5\xc5\x50\xe5\x2d\xc6\x47\x60\x66\x40\x0a\x00\x3f\xd0\x58\x4f\x16\xc2\xd4\x11\x0c\x48\xf0\x75\x24\xf8\x84\x85\xe5\x80\x47\x5c\xd4\xe0\xc7\xe1\x5b\xfd\xbb\x6a\x7e\x48\x48\x18\x1a\xa9\x74\x34\x0c\x46\x06\xb2\x61\x67\x90\xb6\xb6\xb7\x22\x83\xa7\x0e\x8f\x15\x95\x76\xd4\xa3\x50\x76\x80\xba\x12\xcf\x98\xc7\x00\xb4\x04\x4f\x9c\x49\xaf\x51\x68\x22\x51\x99\x44\x74\xc4\x6a\xa0\x78\x92\x37\xd4\xb5\x79\xd0\xb0\x15\x4f\xec\xe3\xba\xa3\xc2\xa5\xa0\x69\x66\xb5\xdf\x56\xab\x4f\x3c\x55\x0a\x85\xce\x96\x56\x35\x18\x44\x3c\xf8\x9a\x8b\xed\x98\xdc\x96\xb3\x20\x79\x5b\xad\x26\xb7\xb9\x87\x41\x84\x44\x68\x86\x6a\x9c\x1b\xdf\x36\x51\x16\xc6\x01\x32\x51\x7c\x6d\x4a\xe4\xac\x65\x0c\x05\x50\x0f\xe9\xf5\x53\x87\x55\x5e\xdf\x75\xe3\xdc\xaf\xc4\x5c\x6e\xed\x64\x33\x99\x33\x3f\x6b\x4b\xd8\x10\x60\x14\x65\xd0\x0d\xbb\x9a\xde\xcb\x84\x04\xf3\xfb\x27\x55\x34\x7b\x28\x48\x48\x27\xb2\x06\x6f\xcc\x58\x41\x02\x18\x0e\x73\x59\x2c\x45\xab\xc1\x61\x72\x0b\x92\x47\x34\x84\x1f\xf1\x9d\xfe\xcd\x27\x86\xe1\x70\xc5\x16\xfb\x90\x1d\x96\x92\x3c\x5d\x96\x78\xbb\x75\xc2\xe5\xac\x6b\x50\x6e\xb2\x52\xf3\x4b\xb5\x7a\x04\xa6\x44\x65\xf0\x01\x32\x85\xa2\xc8\x5f\xe6\x5f\xd5\x38\x65\xd3\x6f\xee\xdb\x5f\x5e\xbf\x6e\x15\x17\xa0\xd7\x3a\xae\x6d\xc8\xe6\x5b\xca\x60\xd5\x7b\x29\x6e\xf1\x8c\x9c\xff\x2c\x37\x7c\x17\x3b\xbd\x60\x5e\x96\x14\xbe\x4b\x3a\x80\x43\x98\xcd\xe4\xe2\x85\x07\x0c\xb9\x80\xe5\xa6\xe4\x96\x4d\x61\x98\xcd\xd6\xb8\xc2\xea\x16\x65\x23\xb7\x41\xb9\x01\x96\xbd\x5a\xc9\x39\x7f\x91\x83\x17\xf7\xe2\x25\x4c\x77\x29\x66\xcb\xe0\x39\x4c\x83\xe7\xbe\xd8\xd8\xfb\xdc\xb7\xd5\xec\xfb\x15\x04\xfb\x1e\x0a\x55\xa8\xce\x73\xc9\x7d\xe1\x90\xa9\x41\x60\x2c\x70\xd8\xb0\x77\xd9\x63\x78\xe2\x78\x98\x27\xcd\xd3\xd3\xd3\x2c\xf9\x86\x18\x70\x61\xde\xc9\xcd\x97\x07\xb9\x05\xc1\x6b\xbd\x1c\xc8\xe5\xed\x01\x8f\xc2\xe2\xc4\x1d\x4c\x84\xd4\xd4\x13\x4e\xd3\x81\x45\x43\x41\x99\x21\x9a\xf5\x15\x6b\x09\xfe\x17\x2d\x98\xa1\x67\x5e\xa2\x0e\xb9\x88\x6b\x10\x90\x84\x2a\x12\xd1\xbf\xb0\x30\xe9\xbf\xf9\xf9\x57\x0c\x49\x41\xbd\xde\x80\xc8\x86\x8d\x95\x6b\x69\x21\x5f\x0c\x2e\xba\xb7\xe4\x36\x73\xef\xf1\x47\x8a\x37\x40\x19\x3c\xf8\x76\xbc\xee\x90\xc2\x18\x5e\x4b\xbc\xc5\xe9\x37\xfd\x79\x68\xf3\xa3\xa0\x28\xbc\x4c\xd9\x7f\x66\xca\x4a\x25\x38\x1b\x3d\x9f\x69\x7f\xdf\x7e\xac\xec\x8f\x6c\xe7\xab\xee\xa4\x42\x7e\x87\xa8\x2b\x68\x18\xb2\x27\xf3\xb3\x53\xeb\x5b\x68\x2f\x71\xf8\xef\x88\xc3\xb4\x35\x5d\x84\x5a\x7d\xf0\x7c\x6e\x06\xa7\xd8\x46\x0f\x1c\x1a\xdc\x7e\xb2\xef\x99\x95\xd9\x3e\xef\xa0\xa0\x16\x2c\x37\xd1\xd3\x4a\xf0\xec\x91\xb1\x22\xd1\xbe\x84\xc7\x83\x16\x7d\xf0\x24\xe8\x7f\x68\xb0\xac\x76\x98\xeb\x47\x53\x9f\xa9\xa1\x9c\xb7\x5b\x1b\x3d\xe5\x84\x85\x28\x74\xf7\x97\x0f\xa7\xf4\x70\xad\x6e\xa2\xf6\x2f\xc7\x7c\x5b\x35\xdd\xb1\xbd\x5b\x3d\x6b\x52\xe8\xde\x97\xae\x70\x6f\xaa\xf1\xde\x45\x26\x40\x7d\xbc\x87\x32\xed\x9d\x9d\x1e\x33\x83\xef\xeb\x88\x5f\x26\xd6\x7f\x67\x9b\xbb\xba\xdc\x5a\x9c\xd9\x5b\x2e\xb8\xe6\x43\xcf\xb0\xe4\x5a\x3d\x41\xf8\x12\x8d\xff\x8e\x68\x7c\x59\x74\xbd\x2c\xba\x5e\x16\x5d\xfb\x1e\x2c\x2f\x8b\xae\xbd\x69\xd9\xb6\x39\xaa\xee\x98\xfd\xb8\xe3\x47\x6c\x85\x2e\x50\x96\x23\x4f\x7e\x12\x23\x77\x34\x69\xe5\xa4\xc9\xd2\xd1\xef\xde\xbd\xbb\x6f\x83\x3b\xbf\xb3\xbb\xb9\x25\xb9\x1f\x4d\xc3\x3e\xb5\x2f\x4f\xd9\xba\xbc\xde\xda\xba\x14\x6e\xa2\x3d\xe4\xf2\x95\xde\x66\xed\x5c\x43\xfe\x14\xd6\x6a\xba\xca\x7f\x3c\xff\x74\x01\xf1\x7a\x35\x5b\x19\x8d\x76\x4e\x55\xc8\x14\x0c\xa6\xbb\xed\xc3\x6d\xe6\x8e\x8d\xf3\x0e\xeb\x99\xa1\xee\x84\xf4\xfa\x38\xfd\xdf\xca\xa7\x89\x7d\x6b\x6b\xb7\x1c\xaf\x4b\x55\x5c\xe6\xaf\xba\x33\xe0\xe1\x54\x8f\x8c\x55\x1c\x1d\x5b\x56\xf1\xf7\x3b\xc9\x44\x8e\xf9\x35\x8a\xef\xf0\x71\xfa\x06\xa9\x7f\xfe\x7b\xb0\xef\xf3\x39\xd8\xee\x5f\x83\x7d\xbf\x8f\xc1\x56\x78\xee\x60\xc9\xe5\x17\xe6\x8f\xf8\x8a\xf4\xff\x03\x00\x00\xff\xff\x99\xde\x39\x7b\x7a\x43\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 17274, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
